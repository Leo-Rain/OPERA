clc
clear

% % J1
% str = 'J_1 = 0.1e1 / 0.2e1*i * (2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) ^ (-0.1e1 / 0.2e1) * (-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) ^ (-0.1e1 / 0.2e1) * (-(i * E * abs(cg5) - cg * E - D__TE + cg3) * sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) * log((-i * sqrt(-2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) * sqrt(cg1 ^ 2 * E ^ 2 + 2 * (D__TE - cg3) * cg1 * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + (cg5 ^ 2) + cg1 ^ 2) + (-E ^ 2 * cg1 + (-D__TE + cg3) * E + cg - cg1) * abs(cg5) + -i * cg * cg1 * E ^ 2 + -i * (cg + cg1) * (D__TE - cg3) * E + -i * D__TE ^ 2 + 2*i * D__TE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * cg1)) + (i * E * abs(cg5) - cg * E - D__TE + cg3) * sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) * log((-i * sqrt(-2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) * sqrt(E ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__TE - cg3) * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + (cg5 ^ 2)) + (-E ^ 2 * xi__3 + (-D__TE + cg3) * E - xi__3 + cg) * abs(cg5) + -i * cg * xi__3 * E ^ 2 + -i * (cg + xi__3) * (D__TE - cg3) * E + -i * D__TE ^ 2 + 2*i * D__TE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * xi__3)) + (((log((-i * sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(cg1 ^ 2 * C ^ 2 + 2 * (D__LE - cg3) * cg1 * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + (cg5 ^ 2) + cg1 ^ 2) + (-C ^ 2 * cg1 + (-D__LE + cg3) * C + cg - cg1) * abs(cg5) + -i * cg1 * cg * C ^ 2 + -i * (cg + cg1) * (D__LE - cg3) * C + -i * D__LE ^ 2 + 2*i * D__LE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * cg1)) - log((-i * sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(C ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__LE - cg3) * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + (cg5 ^ 2)) + (-C ^ 2 * xi__3 + (-D__LE + cg3) * C - xi__3 + cg) * abs(cg5) + -i * cg * xi__3 * C ^ 2 + -i * (cg + xi__3) * (D__LE - cg3) * C + -i * D__LE ^ 2 + 2*i * D__LE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * xi__3))) * (i * C * abs(cg5) - C * cg - D__LE + cg3) * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) + (i * C * abs(cg5) + C * cg + D__LE - cg3) * sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * (log((-i * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(cg1 ^ 2 * C ^ 2 + 2 * (D__LE - cg3) * cg1 * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + (cg5 ^ 2) + cg1 ^ 2) + (C ^ 2 * cg1 + (D__LE - cg3) * C - cg + cg1) * abs(cg5) + -i * cg1 * cg * C ^ 2 + -i * (cg + cg1) * (D__LE - cg3) * C + -i * D__LE ^ 2 + 2*i * D__LE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (i * cg + -i * cg1 - abs(cg5))) - log((-i * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(C ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__LE - cg3) * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + (cg5 ^ 2)) + (C ^ 2 * xi__3 + (D__LE - cg3) * C - cg + xi__3) * abs(cg5) + -i * cg * xi__3 * C ^ 2 + -i * (cg + xi__3) * (D__LE - cg3) * C + -i * D__LE ^ 2 + 2*i * D__LE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (i * cg + -i * xi__3 - abs(cg5))))) * sqrt(2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) + sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * (log((-2*i * sqrt(E ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__TE - cg3) * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + (cg5 ^ 2)) * sqrt(2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) + (2 * E ^ 2 * xi__3 + (2 * D__TE - 2 * cg3) * E + 2 * xi__3 - 2 * cg) * abs(cg5) + -2*i * cg * xi__3 * E ^ 2 + -2*i * (cg + xi__3) * (D__TE - cg3) * E + -2*i * (D__TE ^ 2 - 2 * D__TE * cg3 + cg3 ^ 2 + (cg5 ^ 2))) / (i * cg + -i * xi__3 - abs(cg5))) - log((-i * sqrt(cg1 ^ 2 * E ^ 2 + 2 * (D__TE - cg3) * cg1 * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + (cg5 ^ 2) + cg1 ^ 2) * sqrt(2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) + (E ^ 2 * cg1 + (D__TE - cg3) * E - cg + cg1) * abs(cg5) + -i * cg * cg1 * E ^ 2 + -i * (cg + cg1) * (D__TE - cg3) * E + -i * (D__TE ^ 2 - 2 * D__TE * cg3 + cg3 ^ 2 + (cg5 ^ 2))) / (i * cg + -i * cg1 - abs(cg5))) - log(0.2e1)) * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * (i * E * abs(cg5) + cg * E + D__TE - cg3)) * sqrt(-2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3))) * (-2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) ^ (-0.1e1 / 0.2e1) * (2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) ^ (-0.1e1 / 0.2e1) / abs(cg5);';
% tmp_exp = {'cg3','cg5','cg1','cg'};
% var_exp = {'y_m','z_m','xi_1','x_m'};

% % J2
% str = 'J_2 = -i * (2*i * (cg * E + D__TE - cg3) * E * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) ^ (-0.1e1 / 0.2e1) * ((C ^ 2 + 1) ^ (-0.1e1 / 0.2e1)) * (2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) ^ (-0.1e1 / 0.2e1) * (E ^ 2 + 1) ^ (-0.1e1 / 0.2e1) * (-2*i * (cg * E + D__TE - cg3) * E * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) ^ (-0.1e1 / 0.2e1) * (-2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) ^ (-0.1e1 / 0.2e1) * (sqrt(-2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(2*i * (cg * E + D__TE - cg3) * E * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) * sqrt((C ^ 2 + 1)) * sqrt(2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(E ^ 2 + 1) * ((i * cg * E + 0.1e1 / 0.2e1*i * D__TE + -0.1e1 / 0.2e1*i * cg3) * abs(cg5) - E * cg ^ 2 / 2 + (-D__TE / 2 + cg3 / 2) * cg + E * (cg5 ^ 2) / 2) * log((-i * sqrt(-2*i * (cg * E + D__TE - cg3) * E * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) * sqrt(cg1 ^ 2 * E ^ 2 + 2 * (D__TE - cg3) * cg1 * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + (cg5 ^ 2) + cg1 ^ 2) + (-E ^ 2 * cg1 + (-D__TE + cg3) * E + cg - cg1) * abs(cg5) + -i * cg * cg1 * E ^ 2 + -i * (cg + cg1) * (D__TE - cg3) * E + -i * D__TE ^ 2 + 2*i * D__TE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * cg1)) - sqrt(-2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(2*i * (cg * E + D__TE - cg3) * E * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) * sqrt((C ^ 2 + 1)) * sqrt(2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(E ^ 2 + 1) * ((i * cg * E + 0.1e1 / 0.2e1*i * D__TE + -0.1e1 / 0.2e1*i * cg3) * abs(cg5) - E * cg ^ 2 / 2 + (-D__TE / 2 + cg3 / 2) * cg + E * (cg5 ^ 2) / 2) * log((-i * sqrt(-2*i * (cg * E + D__TE - cg3) * E * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) * sqrt(E ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__TE - cg3) * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + (cg5 ^ 2)) + (-E ^ 2 * xi__3 + (-D__TE + cg3) * E - xi__3 + cg) * abs(cg5) + -i * cg * xi__3 * E ^ 2 + -i * (cg + xi__3) * (D__TE - cg3) * E + -i * D__TE ^ 2 + 2*i * D__TE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * xi__3)) + (((i * (C * (log((sqrt(cg1 ^ 2 * (C ^ 2) + 2 * (D__LE - cg3) * cg1 * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + (cg5 ^ 2) + cg1 ^ 2) * sqrt((C ^ 2 + 1)) + (C ^ 2) * cg1 + (D__LE - cg3) * C - cg + cg1) * ((C ^ 2 + 1) ^ (-0.1e1 / 0.2e1))) - log(((C ^ 2 + 1) ^ (-0.1e1 / 0.2e1)) * (sqrt((C ^ 2) * xi__3 ^ 2 + 2 * xi__3 * (D__LE - cg3) * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + (cg5 ^ 2)) * sqrt((C ^ 2 + 1)) + (C ^ 2) * xi__3 + (D__LE - cg3) * C - cg + xi__3))) * sqrt(E ^ 2 + 1) - E * sqrt((C ^ 2 + 1)) * (log((sqrt(cg1 ^ 2 * E ^ 2 + 2 * (D__TE - cg3) * cg1 * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + (cg5 ^ 2) + cg1 ^ 2) * sqrt(E ^ 2 + 1) + E ^ 2 * cg1 + (D__TE - cg3) * E - cg + cg1) * (E ^ 2 + 1) ^ (-0.1e1 / 0.2e1)) - log((E ^ 2 + 1) ^ (-0.1e1 / 0.2e1) * (sqrt(E ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__TE - cg3) * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + (cg5 ^ 2)) * sqrt(E ^ 2 + 1) + E ^ 2 * xi__3 + (D__TE - cg3) * E - cg + xi__3)))) * abs(cg5) * sqrt(-2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) - ((0.1e1 / 0.2e1*i * D__LE + -0.1e1 / 0.2e1*i * cg3 + i * C * cg) * abs(cg5) - C * cg ^ 2 / 2 + (-D__LE / 2 + cg3 / 2) * cg + ((C * cg5 ^ 2) / 0.2e1)) * sqrt((C ^ 2 + 1)) * (log((-i * sqrt(-2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(cg1 ^ 2 * (C ^ 2) + 2 * (D__LE - cg3) * cg1 * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + (cg5 ^ 2) + cg1 ^ 2) + (-(C ^ 2) * cg1 + (-D__LE + cg3) * C + cg - cg1) * abs(cg5) + -i * cg1 * cg * (C ^ 2) + -i * (cg + cg1) * (D__LE - cg3) * C + -i * D__LE ^ 2 + 2*i * D__LE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * cg1)) - log((-i * sqrt(-2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt((C ^ 2) * xi__3 ^ 2 + 2 * xi__3 * (D__LE - cg3) * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + (cg5 ^ 2)) + (-(C ^ 2) * xi__3 + (-D__LE + cg3) * C - xi__3 + cg) * abs(cg5) + -i * cg * xi__3 * (C ^ 2) + -i * (cg + xi__3) * (D__LE - cg3) * C + -i * D__LE ^ 2 + 2*i * D__LE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * xi__3))) * sqrt(E ^ 2 + 1)) * sqrt(2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) + sqrt(-2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * (log((-i * sqrt(2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt((C ^ 2) * xi__3 ^ 2 + 2 * xi__3 * (D__LE - cg3) * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + (cg5 ^ 2)) + ((C ^ 2) * xi__3 + (D__LE - cg3) * C - cg + xi__3) * abs(cg5) + -i * cg * xi__3 * (C ^ 2) + -i * (cg + xi__3) * (D__LE - cg3) * C + -i * D__LE ^ 2 + 2*i * D__LE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (i * cg + -i * xi__3 - abs(cg5))) - log((-i * sqrt(2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(cg1 ^ 2 * (C ^ 2) + 2 * (D__LE - cg3) * cg1 * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + (cg5 ^ 2) + cg1 ^ 2) + ((C ^ 2) * cg1 + (D__LE - cg3) * C - cg + cg1) * abs(cg5) + -i * cg1 * cg * (C ^ 2) + -i * (cg + cg1) * (D__LE - cg3) * C + -i * D__LE ^ 2 + 2*i * D__LE * cg3 + -i * cg3 ^ 2 + -i * (cg5 ^ 2)) / (i * cg + -i * cg1 - abs(cg5)))) * ((0.1e1 / 0.2e1*i * D__LE + -0.1e1 / 0.2e1*i * cg3 + i * C * cg) * abs(cg5) + C * cg ^ 2 / 2 + (D__LE / 2 - cg3 / 2) * cg - ((C * cg5 ^ 2) / 0.2e1)) * sqrt((C ^ 2 + 1)) * sqrt(E ^ 2 + 1)) * sqrt(2*i * (cg * E + D__TE - cg3) * E * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) - sqrt(-2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * (log((-2*i * sqrt(E ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__TE - cg3) * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + (cg5 ^ 2)) * sqrt(2*i * (cg * E + D__TE - cg3) * E * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) + (2 * E ^ 2 * xi__3 + (2 * D__TE - 2 * cg3) * E + 2 * xi__3 - 2 * cg) * abs(cg5) + -2*i * cg * xi__3 * E ^ 2 + -2*i * (cg + xi__3) * (D__TE - cg3) * E + -2*i * (D__TE ^ 2 - 2 * D__TE * cg3 + cg3 ^ 2 + (cg5 ^ 2))) / (i * cg + -i * xi__3 - abs(cg5))) - log((-i * sqrt(2*i * (cg * E + D__TE - cg3) * E * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3)) * sqrt(cg1 ^ 2 * E ^ 2 + 2 * (D__TE - cg3) * cg1 * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + (cg5 ^ 2) + cg1 ^ 2) + (E ^ 2 * cg1 + (D__TE - cg3) * E - cg + cg1) * abs(cg5) + -i * cg * cg1 * E ^ 2 + -i * (cg + cg1) * (D__TE - cg3) * E + -i * (D__TE ^ 2 - 2 * D__TE * cg3 + cg3 ^ 2 + (cg5 ^ 2))) / (i * cg + -i * cg1 - abs(cg5))) - log(0.2e1)) * ((i * cg * E + 0.1e1 / 0.2e1*i * D__TE + -0.1e1 / 0.2e1*i * cg3) * abs(cg5) + E * cg ^ 2 / 2 + (D__TE / 2 - cg3 / 2) * cg - E * (cg5 ^ 2) / 2) * sqrt((C ^ 2 + 1)) * sqrt(2*i * (C * cg + D__LE - cg3) * C * abs(cg5) + ((cg + cg5) * C + D__LE - cg3) * ((cg - cg5) * C + D__LE - cg3)) * sqrt(E ^ 2 + 1)) * sqrt(-2*i * (cg * E + D__TE - cg3) * E * abs(cg5) + (D__TE + (cg + cg5) * E - cg3) * (D__TE + (cg - cg5) * E - cg3))) / abs(cg5);';
% tmp_exp = {'cg3','cg5','cg1','cg'};
% var_exp = {'y_m','z_m','xi_1','x_m'};

% J4
str = 'J_4 = -0.1e1 / 0.2e1*i * ((C ^ 2 + 1) ^ (-0.1e1 / 0.2e1)) * ((E ^ 2 + 1) ^ (-0.1e1 / 0.2e1)) * (sqrt(2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + ((D__TE + (cg - cg5) * E - cg3) * (D__TE + (cg + cg5) * E - cg3))) * sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * (i * E * abs(cg5) - (cg * E) - D__TE + cg3) * sqrt((E ^ 2 + 1)) * sqrt((C ^ 2 + 1)) * cg3 * log((-i * sqrt((cg1 ^ 2 * E ^ 2 + 2 * (D__TE - cg3) * cg1 * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + cg5 ^ 2 + cg1 ^ 2)) * sqrt(-2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + ((D__TE + (cg - cg5) * E - cg3) * (D__TE + (cg + cg5) * E - cg3))) + ((-E ^ 2 * cg1 + (-D__TE + cg3) * E + cg - cg1) * abs(cg5)) + -i * cg * cg1 * (E ^ 2) + -i * (D__TE - cg3) * (cg + cg1) * E + -i * (D__TE ^ 2) + 2*i * D__TE * cg3 + -i * (cg3 ^ 2) + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * cg1)) - sqrt(2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + ((D__TE + (cg - cg5) * E - cg3) * (D__TE + (cg + cg5) * E - cg3))) * sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * (i * E * abs(cg5) - (cg * E) - D__TE + cg3) * sqrt((E ^ 2 + 1)) * sqrt((C ^ 2 + 1)) * cg3 * log((-i * sqrt(-2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + ((D__TE + (cg - cg5) * E - cg3) * (D__TE + (cg + cg5) * E - cg3))) * sqrt((E ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__TE - cg3) * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + cg5 ^ 2)) + ((-E ^ 2 * xi__3 + (-D__TE + cg3) * E - xi__3 + cg) * abs(cg5)) + -i * cg * xi__3 * (E ^ 2) + -i * (cg + xi__3) * (D__TE - cg3) * E + -i * (D__TE ^ 2) + 2*i * D__TE * cg3 + -i * (cg3 ^ 2) + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * xi__3)) + sqrt(-2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + ((D__TE + (cg - cg5) * E - cg3) * (D__TE + (cg + cg5) * E - cg3))) * (((-2*i * abs(cg5) * ((log(((C ^ 2 + 1) ^ (-0.1e1 / 0.2e1)) * (sqrt((cg1 ^ 2 * C ^ 2 + 2 * (D__LE - cg3) * cg1 * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + cg5 ^ 2 + cg1 ^ 2)) * sqrt((C ^ 2 + 1)) + (C ^ 2 * cg1) + ((D__LE - cg3) * C) - cg + cg1)) - log((sqrt((C ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__LE - cg3) * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + cg5 ^ 2)) * sqrt((C ^ 2 + 1)) + (C ^ 2 * xi__3) + ((D__LE - cg3) * C) - cg + xi__3) * ((C ^ 2 + 1) ^ (-0.1e1 / 0.2e1)))) * sqrt((E ^ 2 + 1)) - sqrt((C ^ 2 + 1)) * (log(((E ^ 2 + 1) ^ (-0.1e1 / 0.2e1)) * (sqrt((cg1 ^ 2 * E ^ 2 + 2 * (D__TE - cg3) * cg1 * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + cg5 ^ 2 + cg1 ^ 2)) * sqrt((E ^ 2 + 1)) + (E ^ 2 * cg1) + ((D__TE - cg3) * E) - cg + cg1)) - log((sqrt((E ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__TE - cg3) * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + cg5 ^ 2)) * sqrt((E ^ 2 + 1)) + (E ^ 2 * xi__3) + ((D__TE - cg3) * E) - cg + xi__3) * ((E ^ 2 + 1) ^ (-0.1e1 / 0.2e1))))) * sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) - (i * C * abs(cg5) - (C * cg) - D__LE + cg3) * (log((-i * sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * sqrt((cg1 ^ 2 * C ^ 2 + 2 * (D__LE - cg3) * cg1 * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + cg5 ^ 2 + cg1 ^ 2)) + ((-C ^ 2 * cg1 + (-D__LE + cg3) * C + cg - cg1) * abs(cg5)) + -i * cg1 * cg * (C ^ 2) + -i * (D__LE - cg3) * (cg + cg1) * C + -i * (D__LE ^ 2) + 2*i * D__LE * cg3 + -i * (cg3 ^ 2) + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * cg1)) - log((-i * sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * sqrt((C ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__LE - cg3) * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + cg5 ^ 2)) + ((-C ^ 2 * xi__3 + (-D__LE + cg3) * C - xi__3 + cg) * abs(cg5)) + -i * cg * xi__3 * (C ^ 2) + -i * (cg + xi__3) * (D__LE - cg3) * C + -i * (D__LE ^ 2) + 2*i * D__LE * cg3 + -i * (cg3 ^ 2) + -i * (cg5 ^ 2)) / (abs(cg5) + i * cg + -i * xi__3))) * sqrt((E ^ 2 + 1)) * sqrt((C ^ 2 + 1)) * cg3) * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) + sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * sqrt((E ^ 2 + 1)) * sqrt((C ^ 2 + 1)) * (i * C * abs(cg5) + (C * cg) + D__LE - cg3) * cg3 * (log((-i * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * sqrt((C ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__LE - cg3) * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + cg5 ^ 2)) + ((C ^ 2 * xi__3 + (D__LE - cg3) * C - cg + xi__3) * abs(cg5)) + -i * cg * xi__3 * (C ^ 2) + -i * (cg + xi__3) * (D__LE - cg3) * C + -i * (D__LE ^ 2) + 2*i * D__LE * cg3 + -i * (cg3 ^ 2) + -i * (cg5 ^ 2)) / (i * cg + -i * xi__3 - abs(cg5))) - log((-i * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * sqrt((cg1 ^ 2 * C ^ 2 + 2 * (D__LE - cg3) * cg1 * C + D__LE ^ 2 - 2 * D__LE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + cg5 ^ 2 + cg1 ^ 2)) + ((C ^ 2 * cg1 + (D__LE - cg3) * C - cg + cg1) * abs(cg5)) + -i * cg1 * cg * (C ^ 2) + -i * (D__LE - cg3) * (cg + cg1) * C + -i * (D__LE ^ 2) + 2*i * D__LE * cg3 + -i * (cg3 ^ 2) + -i * (cg5 ^ 2)) / (i * cg + -i * cg1 - abs(cg5))))) * sqrt(2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + ((D__TE + (cg - cg5) * E - cg3) * (D__TE + (cg + cg5) * E - cg3))) - sqrt(-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * (i * E * abs(cg5) + (cg * E) + D__TE - cg3) * sqrt(2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) * (log((-2*i * sqrt((E ^ 2 * xi__3 ^ 2 + 2 * xi__3 * (D__TE - cg3) * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * xi__3 * cg + xi__3 ^ 2 + cg3 ^ 2 + cg5 ^ 2)) * sqrt(2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + ((D__TE + (cg - cg5) * E - cg3) * (D__TE + (cg + cg5) * E - cg3))) + ((2 * E ^ 2 * xi__3 + (2 * D__TE - 2 * cg3) * E + 2 * xi__3 - 2 * cg) * abs(cg5)) + -2*i * cg * xi__3 * (E ^ 2) + -2*i * (cg + xi__3) * (D__TE - cg3) * E + -2*i * (D__TE ^ 2 - 2 * D__TE * cg3 + cg3 ^ 2 + cg5 ^ 2)) / (i * cg + -i * xi__3 - abs(cg5))) - log((-i * sqrt(2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + ((D__TE + (cg - cg5) * E - cg3) * (D__TE + (cg + cg5) * E - cg3))) * sqrt((cg1 ^ 2 * E ^ 2 + 2 * (D__TE - cg3) * cg1 * E + D__TE ^ 2 - 2 * D__TE * cg3 + cg ^ 2 - 2 * cg1 * cg + cg3 ^ 2 + cg5 ^ 2 + cg1 ^ 2)) + ((E ^ 2 * cg1 + (D__TE - cg3) * E - cg + cg1) * abs(cg5)) + -i * cg * cg1 * (E ^ 2) + -i * (D__TE - cg3) * (cg + cg1) * E + -i * (D__TE ^ 2 - 2 * D__TE * cg3 + cg3 ^ 2 + cg5 ^ 2)) / (i * cg + -i * cg1 - abs(cg5))) - log(0.2e1)) * sqrt((E ^ 2 + 1)) * sqrt((C ^ 2 + 1)) * cg3)) * (-2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) ^ (-0.1e1 / 0.2e1) * (2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + ((D__TE + (cg - cg5) * E - cg3) * (D__TE + (cg + cg5) * E - cg3))) ^ (-0.1e1 / 0.2e1) * (-2*i * E * (cg * E + D__TE - cg3) * abs(cg5) + ((D__TE + (cg - cg5) * E - cg3) * (D__TE + (cg + cg5) * E - cg3))) ^ (-0.1e1 / 0.2e1) * (2*i * C * (C * cg + D__LE - cg3) * abs(cg5) + (((cg - cg5) * C + D__LE - cg3) * ((cg + cg5) * C + D__LE - cg3))) ^ (-0.1e1 / 0.2e1) / abs(cg5);';
tmp_exp = {'cg3','cg5','cg1','cg'};
var_exp = {'y_m','z_m','xi_1','x_m'};




expression = [{'__','/','*','\^'} tmp_exp];
replace = [{'_','./','.*','.^'} var_exp];
str = regexprep(str, expression, replace)

% [x_m y_m z_m]
% E, D_TE, C, D_LE